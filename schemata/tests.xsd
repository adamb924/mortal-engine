<?xml version="1.0" encoding="UTF-8"?>
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema" 
xmlns:met="https://www.adambaker.org/mortal-engine/tests"
targetNamespace="https://www.adambaker.org/mortal-engine/tests">

    <xs:element name="tests">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="sqlite-database" type="met:database" minOccurs="0" maxOccurs="1"/>
                <xs:choice>
                    <xs:choice maxOccurs="unbounded">
                        <xs:element name="schema" type="met:schema"/>
                    </xs:choice>
                </xs:choice>
            </xs:sequence>
        </xs:complexType>    
    </xs:element>
    
    <xs:complexType name="schema" mixed="true">
        <xs:sequence>
            <xs:element name="morphology-file" type="xs:string"/>
            <xs:choice>
                <xs:choice maxOccurs="unbounded">
                    <xs:element name="transduction-test" type="met:transduction-test"/>
                    <xs:element name="parsing-test" type="met:parsing-test"/>
                    <xs:element name="recognition-test" type="met:recognition-test"/>
                    <xs:element name="suggestion-test" type="met:suggestion-test"/>
                    <xs:element name="interlinear-gloss-test" type="met:interlinear-gloss-test"/>
                    <xs:element name="stem-replacement-test" type="met:stem-replacement-test"/>
                    <xs:element name="accept" type="met:acceptance-test"/>
                    <xs:element name="reject" type="met:acceptance-test"/>
                    <xs:element name="generation-test" type="met:generation-test"/>
                    <xs:element name="generate" type="met:quick-generation-test"/>
                    <xs:element name="blank" type="xs:string" fixed=""/>
                    <xs:element name="message" type="xs:string"/>
                </xs:choice>
            </xs:choice>    
        </xs:sequence>
        <xs:attribute name="sound-and-fury" type="xs:string"/>
        <xs:attribute name="label" type="xs:string" use="optional"/>
        <xs:attribute name="show-model" type="met:true-false-type" use="optional" default="true"/>
    </xs:complexType>

    <xs:complexType name="test">
        <xs:attribute name="label" type="xs:string" use="optional"/>
        <xs:attribute name="debug" type="met:true-false-type" use="optional"/>
        <xs:attribute name="stem-debug" type="met:true-false-type" use="optional"/>
    </xs:complexType>

    <xs:complexType name="transduction-test">
        <xs:complexContent>
            <xs:extension base="met:test">
                <xs:sequence>
                    <xs:element name="input" type="met:form"/>
                    <xs:element name="output" type="met:form" minOccurs="1" maxOccurs="unbounded"/>
                </xs:sequence>        
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="interlinear-gloss-test">
        <xs:complexContent>
            <xs:extension base="met:test">
                <xs:sequence>
                    <xs:element name="input" type="met:form"/>
                    <xs:element name="output" type="met:form" minOccurs="1" maxOccurs="unbounded"/>
                </xs:sequence>        
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="parsing-test">
        <xs:complexContent>
            <xs:extension base="met:test">
                <xs:sequence>
                    <xs:element name="input" type="met:form"/>
                    <xs:element name="output" type="met:label-list" minOccurs="1" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="suggestion-test">
        <xs:complexContent>
            <xs:extension base="met:test">
                <xs:sequence>
                    <xs:element name="input" type="met:form"/>
                    <xs:element name="output" type="met:stem-label-list" minOccurs="1" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="recognition-test">
        <xs:complexContent>
            <xs:extension base="met:test">
                <xs:sequence>
                    <xs:element name="input" type="met:form"/>
                    <xs:element name="should-be-accepted" type="met:yes-no-type"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="acceptance-test">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="lang" type="xs:string" use="required"/>
                <xs:attribute name="label" type="xs:string" use="optional"/>
                <xs:attribute name="debug" type="met:true-false-type" use="optional"/>
                <xs:attribute name="stem-debug" type="met:true-false-type" use="optional"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:complexType name="stem-replacement-test">
        <xs:complexContent>
            <xs:extension base="met:test">
                <xs:sequence>
                    <xs:element name="input" type="met:form"/>
                    <xs:element name="replacement-stem" type="met:stem"/>
                    <xs:element name="output" type="met:form"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="quick-generation-test">
        <xs:complexContent>
            <xs:extension base="met:test">
                <xs:attribute name="morphemes" type="xs:string"/>
                <xs:attribute name="stem" type="xs:unsignedLong"/>
                <xs:attribute name="lang" type="xs:string"/>
                <xs:attribute name="output" type="xs:string"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="generation-test">
        <xs:complexContent>
            <xs:extension base="met:test">
                <xs:sequence>
                    <xs:element name="morphemes" type="xs:string"/>
                    <xs:element name="stem">
                        <xs:complexType>
                            <xs:attribute name="id" type="xs:unsignedLong" use="required"/>
                        </xs:complexType>
                    </xs:element>
                    <xs:element name="output" type="met:form" minOccurs="1" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="database">
        <xs:attribute name="filename" type="xs:string"/>
        <xs:attribute name="database-name" type="xs:string"/>
    </xs:complexType>

    <xs:complexType name="label-list">
        <xs:sequence>
            <xs:element name="label" type="xs:string" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="stem-label-list">
        <xs:sequence>
            <xs:element name="label" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="stem" type="xs:string" minOccurs="1" maxOccurs="1"/>
            <xs:element name="label" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="stem">
        <xs:sequence>
            <xs:element name="form" type="met:form" maxOccurs="unbounded"/>
            <xs:element name="tag" type="xs:string" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="form">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="lang" type="xs:string" use="required"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:simpleType name="true-false-type">
        <xs:restriction base="xs:string">
            <xs:enumeration value="true"/>
            <xs:enumeration value="false"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="yes-no-type">
        <xs:restriction base="xs:string">
            <xs:enumeration value="yes"/>
            <xs:enumeration value="no"/>
        </xs:restriction>
    </xs:simpleType>

</xs:schema>
